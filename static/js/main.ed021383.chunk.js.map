{"version":3,"sources":["serviceWorker.js.js","context/auth.js","util/AuthRoute.js","pages/Chat.js","util/MyPopup.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","components/MenuBar.js","pages/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","Chat","MyPopup","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","gql","LikeButton","post","id","likeCount","likes","useState","liked","setLiked","useEffect","find","like","username","useMutation","variables","postId","likePost","likeButton","Button","color","Icon","name","basic","as","Link","labelPosition","onClick","Label","pointing","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","getPosts","filter","p","writeQuery","deletePostOrMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","size","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","error","Form","Field","Input","placeholder","className","marginBottom","graphQLErrors","message","Home","useQuery","loading","posts","Grid","columns","Row","Column","Transition","Group","map","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","history","push","onError","err","extensions","exception","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","MenuBar","pathname","path","substr","activeItem","setActiveItem","handleItemClick","e","Menu","secondary","Item","active","position","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","params","commentInputRef","useRef","comment","setComment","getPost","current","blur","submitComment","comments","width","float","console","log","ref","disabled","trim","App","Container","exact","chat","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed021383.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    \n    window.location.hostname === '[::1]' ||\n    \n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    \n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n            \n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n            \n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","    import React, { useReducer, createContext } from 'react';\n    import jwtDecode from 'jwt-decode';\n\n    const initialState = {\n    user: null\n    };\n\n    if (localStorage.getItem('jwtToken')) {\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\n\n    if (decodedToken.exp * 1000 < Date.now()) {\n        localStorage.removeItem('jwtToken');\n    } else {\n        initialState.user = decodedToken;\n    }\n    }\n\n    const AuthContext = createContext({\n    user: null,\n    login: (userData) => {},\n    logout: () => {}\n    });\n\n    function authReducer(state, action) {\n    switch (action.type) {\n        case 'LOGIN':\n        return {\n            ...state,\n            user: action.payload\n        };\n        case 'LOGOUT':\n        return {\n            ...state,\n            user: null\n        };\n        default:\n        return state;\n    }\n    }\n\n    function AuthProvider(props) {\n    const [state, dispatch] = useReducer(authReducer, initialState);\n\n    function login(userData) {\n        localStorage.setItem('jwtToken', userData.token);\n        dispatch({\n        type: 'LOGIN',\n        payload: userData\n        });\n    }\n\n    function logout() {\n        localStorage.removeItem('jwtToken');\n        dispatch({ type: 'LOGOUT' });\n    }\n\n    return (\n        <AuthContext.Provider\n        value={{ user: state.user, login, logout }}\n        {...props}\n        />\n    );\n    }\n\n    export { AuthContext, AuthProvider };","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport { AuthContext } from '../context/auth';\n\nfunction AuthRoute({ component: Component, ...rest }) {\nconst { user } = useContext(AuthContext);\n\nreturn (\n    <Route\n    {...rest}\n        render={(props) =>\n        user ? <Redirect to=\"/\" /> : <Component {...props} />\n    }\n        />\n    );\n    }\n\n    export default AuthRoute;","import React from 'react'\n\n\nfunction Chat() {\n    return (\n        <div>\n        <h1>Chat with other users. This is your chat page</h1>\n        </div>\n    )\n\n    }\nexport default Chat ","import { Popup } from 'semantic-ui-react';\nimport React from 'react';\n\nfunction MyPopup({ content, children }) {\n    return <Popup inverted content={content} trigger={children} />;\n}\n\nexport default MyPopup;","    import React, { useEffect, useState } from 'react';\n    import { Link } from 'react-router-dom';\n    import { useMutation } from '@apollo/react-hooks';\n    import gql from 'graphql-tag';\n    import { Button, Label, Icon } from 'semantic-ui-react';\n\n    import MyPopup from '../util/MyPopup';\n\n    function LikeButton({ user, post: { id, likeCount, likes } }) {\n    const [liked, setLiked] = useState(false);\n\n    useEffect(() => {\n        if (user && likes.find((like) => like.username === user.username)) {\n        setLiked(true);\n        } else setLiked(false);\n    }, [user, likes]);\n\n    const [likePost] = useMutation(LIKE_POST_MUTATION, {\n        variables: { postId: id }\n    });\n\n    const likeButton = user ? (\n        liked ? (\n        <Button color=\"teal\">\n            <Icon name=\"heart\" />\n        </Button>\n        ) : (\n        <Button color=\"teal\" basic>\n            <Icon name=\"heart\" />\n        </Button>\n        )\n    ) : (\n        <Button as={Link} to=\"/login\" color=\"yellow\" basic>\n        <Icon name=\"heart\" />\n        </Button>\n    );\n\n    return (\n        <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\n        <MyPopup content={liked ? 'Unlike' : 'Like'}>{likeButton}</MyPopup>\n        <Label basic color=\"teal\" pointing=\"left\">\n            {likeCount}\n        </Label>\n        </Button>\n    );\n    }\n\n    const LIKE_POST_MUTATION = gql`\n    mutation likePost($postId: ID!) {\n        likePost(postId: $postId) {\n        id\n        likes {\n            id\n            username\n        }\n        likeCount\n        }\n    }\n    `;\n\n    export default LikeButton;","    import gql from 'graphql-tag';\n\n    export const FETCH_POSTS_QUERY = gql`\n    {\n        getPosts {\n        id\n        body\n        createdAt\n        username\n        likeCount\n        likes {\n            username\n        }\n        commentCount\n        comments {\n            id\n            username\n            createdAt\n            body\n        }\n        }\n    }\n    `;","    import React, { useState } from 'react';\n    import gql from 'graphql-tag';\n    import { useMutation } from '@apollo/react-hooks';\n    import { Button, Confirm, Icon } from 'semantic-ui-react';\n\n    import { FETCH_POSTS_QUERY } from '../util/graphql';\n    import MyPopup from '../util/MyPopup';\n\n    function DeleteButton({ postId, commentId, callback }) {\n    const [confirmOpen, setConfirmOpen] = useState(false);\n\n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\n\n    const [deletePostOrMutation] = useMutation(mutation, {\n        update(proxy) {\n        setConfirmOpen(false);\n        if (!commentId) {\n            const data = proxy.readQuery({\n            query: FETCH_POSTS_QUERY\n            });\n            data.getPosts = data.getPosts.filter((p) => p.id !== postId);\n            proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n        }\n        if (callback) callback();\n        },\n        variables: {\n        postId,\n        commentId\n        }\n    });\n    return (\n        <>\n        <MyPopup content={commentId ? 'Delete comment' : 'Delete post'}>\n            <Button\n            as=\"div\"\n            color=\"red\"\n            floated=\"right\"\n            onClick={() => setConfirmOpen(true)}\n            >\n            <Icon name=\"trash\" style={{ margin: 0 }} />\n            </Button>\n        </MyPopup>\n        <Confirm\n            open={confirmOpen}\n            onCancel={() => setConfirmOpen(false)}\n            onConfirm={deletePostOrMutation}\n        />\n        </>\n    );\n    }\n\n    const DELETE_POST_MUTATION = gql`\n    mutation deletePost($postId: ID!) {\n        deletePost(postId: $postId)\n    }\n    `;\n\n    const DELETE_COMMENT_MUTATION = gql`\n    mutation deleteComment($postId: ID!, $commentId: ID!) {\n        deleteComment(postId: $postId, commentId: $commentId) {\n        id\n        comments {\n            id\n            username\n            createdAt\n            body\n        }\n        commentCount\n        }\n    }\n    `;\n\n    export default DeleteButton;","    import React, { useContext } from 'react';\n    import { Button, Card, Icon, Label, Image } from 'semantic-ui-react';\n    import { Link } from 'react-router-dom';\n    import moment from 'moment';\n\n    import { AuthContext } from '../context/auth';\n    import LikeButton from './LikeButton';\n    import DeleteButton from './DeleteButton';\n    import MyPopup from '../util/MyPopup';\n\n    function PostCard({\n    post: { body, createdAt, id, username, likeCount, commentCount, likes }\n    }) {\n    const { user } = useContext(AuthContext);\n\n    return (\n        <Card fluid>\n        <Card.Content>\n            <Image\n            floated=\"right\"\n            size=\"mini\"\n            src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n            />\n            <Card.Header>{username}</Card.Header>\n            <Card.Meta as={Link} to={`/posts/${id}`}>\n            {moment(createdAt).fromNow(true)}\n            </Card.Meta>\n            <Card.Description>{body}</Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n            <LikeButton user={user} post={{ id, likes, likeCount }} />\n            <MyPopup content=\"Comment on post\">\n            <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\n                <Button color=\"blue\" basic>\n                <Icon name=\"comments\" />\n                </Button>\n                <Label basic color=\"blue\" pointing=\"left\">\n                {commentCount}\n                </Label>\n            </Button>\n            </MyPopup>\n            {user && user.username === username && <DeleteButton postId={id} />}\n        </Card.Content>\n        </Card>\n    );\n    }\n\n    export default PostCard;","    import { useState } from 'react';\n\n    export const useForm = (callback, initialState = {}) => {\n    const [values, setValues] = useState(initialState);\n\n    const onChange = (event) => {\n        setValues({ ...values, [event.target.name]: event.target.value });\n    };\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        callback();\n    };\n\n    return {\n        onChange,\n        onSubmit,\n        values\n    };\n    };","    import React from 'react';\n    import { Button, Form } from 'semantic-ui-react';\n    import gql from 'graphql-tag';\n    import { useMutation } from '@apollo/react-hooks';\n\n    import { useForm } from '../util/hooks';\n    import { FETCH_POSTS_QUERY } from '../util/graphql';\n\n    function PostForm() {\n    const { values, onChange, onSubmit } = useForm(createPostCallback, {\n        body: ''\n    });\n\n    const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n        variables: values,\n        update(proxy, result) {\n        const data = proxy.readQuery({\n            query: FETCH_POSTS_QUERY\n        });\n        data.getPosts = [result.data.createPost, ...data.getPosts];\n        proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n        values.body = '';\n        }\n    });\n\n    function createPostCallback() {\n        createPost();\n    }\n\n    return (\n        <>\n        <Form onSubmit={onSubmit}>\n            <h2>Create a post:</h2>\n            <Form.Field>\n            <Form.Input\n                placeholder=\"Kurakani!\"\n                name=\"body\"\n                onChange={onChange}\n                value={values.body}\n                error={error ? true : false}\n            />\n            <Button type=\"submit\" color=\"blue\">\n                Submit\n            </Button>\n            </Form.Field>\n        </Form>\n        {error && (\n            <div className=\"ui error message\" style={{ marginBottom: 15 }}>\n            <ul className=\"list\">\n                <li>{error.graphQLErrors[0].message}</li>\n            </ul>\n            </div>\n        )}\n        </>\n    );\n    }\n\n    const CREATE_POST_MUTATION = gql`\n    mutation createPost($body: String!) {\n        createPost(body: $body) {\n        id\n        body\n        createdAt\n        username\n        likes {\n            id\n            username\n            createdAt\n        }\n        likeCount\n        comments {\n            id\n            body\n            username\n            createdAt\n        }\n        commentCounts\n        }\n    }\n    `;\n\n    export default PostForm;\n","    import React, { useContext } from 'react';\n    import { useQuery } from '@apollo/react-hooks';\n    import { Grid, Transition } from 'semantic-ui-react';\n\n    import { AuthContext } from '../context/auth';\n    import PostCard from '../components/PostCard';\n    import PostForm from '../components/PostForm';\n    import { FETCH_POSTS_QUERY } from '../util/graphql';\n\n    function Home() {\n    const { user } = useContext(AuthContext);\n    const { loading, error, data} = useQuery(FETCH_POSTS_QUERY)\n    let posts = data.getPosts\n\n    return (\n        <Grid columns={3}>\n        <Grid.Row className=\"page-title\">\n            <h1>Recent Posts</h1>\n        </Grid.Row>\n        <Grid.Row>\n            {user && (\n            <Grid.Column>\n                <PostForm />\n            </Grid.Column>\n            )}\n            {loading ? (\n            <h1>Loading posts..</h1>\n            ) : (\n            <Transition.Group>\n                {posts && posts.map((post) => (\n                    <Grid.Column key={post.id} style={{ marginBottom: 15 }}>\n                    <PostCard post={post} />\n                    </Grid.Column>\n                ))}\n            </Transition.Group>\n            )}\n        </Grid.Row>\n        </Grid>\n    );\n    }\n\n    export default Home;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // return (\n    //     <Grid columns={3} divided>\n    //         <Grid.Row className='page-title'>\n    //         <h1>Recent Posts</h1>\n    //         </Grid.Row>\n    //         <Grid.Row>\n    //         {loading ? (\n    //             <h1>Loading posts..</h1>\n    //         ) : (\n    //             posts && posts.map(post => (\n    //                 <Grid.Column key={post.id} style={{marginBottom:25}}>\n    //                 <PostCard post={post}/>\n    //                 </Grid.Column>\n    //             ))\n    //         )}\n    //         </Grid.Row>\n    //     </Grid>","    import React, { useContext, useState } from 'react';\n    import { Button, Form } from 'semantic-ui-react';\n    import { useMutation } from '@apollo/react-hooks';\n    import gql from 'graphql-tag';\n\n    import { AuthContext } from '../context/auth';\n    import { useForm } from '../util/hooks';\n\n    function Login(props) {\n    const context = useContext(AuthContext);\n    const [errors, setErrors] = useState({});\n\n    const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n        username: '',\n        password: ''\n    });\n\n    const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n        update(\n        _,\n        {\n            data: { login: userData }\n        }\n        ) {\n        context.login(userData);\n        props.history.push('/');\n        },\n        onError(err) {\n        setErrors(err.graphQLErrors[0].extensions.exception.errors);\n        },\n        variables: values\n    });\n\n    function loginUserCallback() {\n        loginUser();\n    }\n\n    return (\n        <div className=\"form-container\">\n        <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n            <h1>Login</h1>\n            <Form.Input\n            label=\"Username\"\n            placeholder=\"Username..\"\n            name=\"username\"\n            type=\"text\"\n            value={values.username}\n            error={errors.username ? true : false}\n            onChange={onChange}\n            />\n            <Form.Input\n            label=\"Password\"\n            placeholder=\"Password..\"\n            name=\"password\"\n            type=\"password\"\n            value={values.password}\n            error={errors.password ? true : false}\n            onChange={onChange}\n            />\n            <Button type=\"submit\" primary>\n            Login\n            </Button>\n        </Form>\n        {Object.keys(errors).length > 0 && (\n            <div className=\"ui error message\">\n            <ul className=\"list\">\n                {Object.values(errors).map((value) => (\n                <li key={value}>{value}</li>\n                ))}\n            </ul>\n            </div>\n        )}\n        </div>\n    );\n    }\n\n    const LOGIN_USER = gql`\n    mutation login($username: String!, $password: String!) {\n        login(username: $username, password: $password) {\n        id\n        email\n        username\n        createdAt\n        token\n        }\n    }\n    `;\n\n    export default Login;","    import React, { useContext, useState } from 'react';\n    import { Button, Form } from 'semantic-ui-react';\n    import { useMutation } from '@apollo/react-hooks';\n    import gql from 'graphql-tag';\n\n    import { AuthContext } from '../context/auth';\n    import { useForm } from '../util/hooks';\n\n    function Register(props) {\n    const context = useContext(AuthContext);\n    const [errors, setErrors] = useState({});\n\n    const { onChange, onSubmit, values } = useForm(registerUser, {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n    });\n\n    const [addUser, { loading }] = useMutation(REGISTER_USER, {\n        update(\n        _,\n        {\n            data: { register: userData }\n        }\n        ) {\n        context.login(userData);\n        props.history.push('/');\n        },\n        onError(err) {\n        setErrors(err.graphQLErrors[0].extensions.exception.errors);\n        },\n        variables: values\n    });\n\n    function registerUser() {\n        addUser();\n    }\n\n    return (\n        <div className=\"form-container\">\n        <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n            <h1>Register</h1>\n            <Form.Input\n            label=\"Username\"\n            placeholder=\"Username..\"\n            name=\"username\"\n            type=\"text\"\n            value={values.username}\n            error={errors.username ? true : false}\n            onChange={onChange}\n            />\n            <Form.Input\n            label=\"Email\"\n            placeholder=\"Email..\"\n            name=\"email\"\n            type=\"email\"\n            value={values.email}\n            error={errors.email ? true : false}\n            onChange={onChange}\n            />\n            <Form.Input\n            label=\"Password\"\n            placeholder=\"Password..\"\n            name=\"password\"\n            type=\"password\"\n            value={values.password}\n            error={errors.password ? true : false}\n            onChange={onChange}\n            />\n            <Form.Input\n            label=\"Confirm Password\"\n            placeholder=\"Confirm Password..\"\n            name=\"confirmPassword\"\n            type=\"password\"\n            value={values.confirmPassword}\n            error={errors.confirmPassword ? true : false}\n            onChange={onChange}\n            />\n            <Button type=\"submit\" primary>\n            Register\n            </Button>\n        </Form>\n        {Object.keys(errors).length > 0 && (\n            <div className=\"ui error message\">\n            <ul className=\"list\">\n                {Object.values(errors).map((value) => (\n                <li key={value}>{value}</li>\n                ))}\n            </ul>\n            </div>\n        )}\n        </div>\n    );\n    }\n\n    const REGISTER_USER = gql`\n    mutation register(\n        $username: String!\n        $email: String!\n        $password: String!\n        $confirmPassword: String!\n    ) {\n        register(\n        registerInput: {\n            username: $username\n            email: $email\n            password: $password\n            confirmPassword: $confirmPassword\n        }\n        ) {\n        id\n        email\n        username\n        createdAt\n        token\n        }\n    }\n    `;\n\n    export default Register;","    import React, { useContext, useState } from 'react';\n    import { Menu } from 'semantic-ui-react';\n    import { Link } from 'react-router-dom';\n\n    import { AuthContext } from '../context/auth';\n\n    function MenuBar() {\n    const { user, logout } = useContext(AuthContext);\n    const pathname = window.location.pathname;\n\n    const path = pathname === '/' ? 'home' : pathname.substr(1);\n    const [activeItem, setActiveItem] = useState(path);\n\n    const handleItemClick = (e, { name }) => setActiveItem(name);\n\n    const menuBar = user ? (\n        <Menu pointing secondary size=\"massive\" color=\"pink\">\n        <Menu.Item name={user.username} active as={Link} to=\"/\" />\n\n        <Menu.Menu position=\"right\">\n            <Menu.Item name=\"logout\" onClick={logout} />\n        </Menu.Menu>\n        </Menu>\n    ) : (\n        <Menu pointing secondary size=\"massive\" color=\"green\">\n        <Menu.Item\n            name=\"home\"\n            active={activeItem === 'home'}\n            onClick={handleItemClick}\n            as={Link}\n            to=\"/\"\n        />\n\n        <Menu.Menu position=\"right\">\n            <Menu.Item\n            name=\"login\"\n            active={activeItem === 'login'}\n            onClick={handleItemClick}\n            as={Link}\n            to=\"/login\"\n            />\n            <Menu.Item\n            name=\"register\"\n            active={activeItem === 'register'}\n            onClick={handleItemClick}\n            as={Link}\n            to=\"/register\"\n            />\n            <Menu.Item\n            name=\"chat\"\n            active={activeItem === 'chat'}\n            onClick={handleItemClick}\n            as={Link}\n            to=\"/chat\"\n            />\n        </Menu.Menu>\n        </Menu>\n    );\n\n    return menuBar;\n    }\n\n    export default MenuBar;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // import React, { useState } from 'react'\n    // import { Menu} from 'semantic-ui-react'\n    // import {Link} from 'react-router-dom'\n    // import { AuthContext } from '../context/auth';\n\n\n\n\n    // function MenuBar() {\n\n    //     const pathname= window.location.pathname;\n\n    //     const path = pathname === '/' ? 'home' :pathname.substr(0)\n    //     const [ activeItem, setActiveItem] = useState('home');\n\n\n\n    //     const handleItemClick = (e, {name}) => setActiveItem(name);\n\n    //     return (\n    //         <Menu pointing secondary size='massive' color='green'>\n    //             <Menu.Item\n    //             name='home'\n    //             active={activeItem==='home'}\n    //             onClick={handleItemClick}\n    //             as={Link}\n    //             to=\"/\"\n    //         />\n    //         <Menu.Item\n    //             name='message'\n    //             active={activeItem==='message'}\n    //             onClick={handleItemClick}\n    //             as={Link}\n    //             to='/message'\n    //             />\n            \n    //         <Menu.Menu position='right'>\n    //         <Menu.Item\n    //         name='register'\n    //         active={activeItem==='register'}\n    //         onClick={handleItemClick}\n    //         as={Link}\n    //         to=\"/register\"\n    //         />\n    //         <Menu.Item\n    //             name='login'\n    //             active={activeItem==='login'}\n    //             onClick={handleItemClick}\n    //             as={Link}\n    //             to=\"/login\"\n    //             />\n    //         </Menu.Menu>\n            \n\n    //             </Menu>\n    //     )\n    // }\n\n    // export default MenuBar","    import React, { useContext, useState, useRef } from 'react';\n    import gql from 'graphql-tag';\n    import { useQuery, useMutation } from '@apollo/react-hooks';\n    import moment from 'moment';\n    import {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Image,\n    Icon,\n    Label\n    } from 'semantic-ui-react';\n\n    import { AuthContext } from '../context/auth';\n    import LikeButton from '../components/LikeButton';\n    import DeleteButton from '../components/DeleteButton';\n    import MyPopup from '../util/MyPopup';\n\n    function SinglePost(props) {\n    const postId = props.match.params.postId;\n    const { user } = useContext(AuthContext);\n    const commentInputRef = useRef(null);\n\n    const [comment, setComment] = useState('');\n\n    const {\n        data: { getPost }\n    } = useQuery(FETCH_POST_QUERY, {\n        variables: {\n        postId\n        }\n    });\n\n    const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n        update() {\n        setComment('');\n        commentInputRef.current.blur();\n        },\n        variables: {\n        postId,\n        body: comment\n        }\n    });\n\n    function deletePostCallback() {\n        props.history.push('/');\n    }\n\n    let postMarkup;\n    if (!getPost) {\n        postMarkup = <p>Loading post..</p>;\n    } else {\n        const {\n        id,\n        body,\n        createdAt,\n        username,\n        comments,\n        likes,\n        likeCount,\n        commentCount\n        } = getPost;\n\n        postMarkup = (\n        <Grid>\n            <Grid.Row>\n            <Grid.Column width={2}>\n                <Image\n                src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n                size=\"small\"\n                float=\"right\"\n                />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Card fluid>\n                <Card.Content>\n                    <Card.Header>{username}</Card.Header>\n                    <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                    <Card.Description>{body}</Card.Description>\n                </Card.Content>\n                <hr />\n                <Card.Content extra>\n                    <LikeButton user={user} post={{ id, likeCount, likes }} />\n                    <MyPopup content=\"Comment on post\">\n                    <Button\n                        as=\"div\"\n                        labelPosition=\"right\"\n                        onClick={() => console.log('Comment on post')}\n                    >\n                        <Button basic color=\"blue\">\n                        <Icon name=\"comments\" />\n                        </Button>\n                        <Label basic color=\"blue\" pointing=\"left\">\n                        {commentCount}\n                        </Label>\n                    </Button>\n                    </MyPopup>\n                    {user && user.username === username && (\n                    <DeleteButton postId={id} callback={deletePostCallback} />\n                    )}\n                </Card.Content>\n                </Card>\n                {user && (\n                <Card fluid>\n                    <Card.Content>\n                    <p>Post a comment</p>\n                    <Form>\n                        <div className=\"ui action input fluid\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Comment..\"\n                            name=\"comment\"\n                            value={comment}\n                            onChange={(event) => setComment(event.target.value)}\n                            ref={commentInputRef}\n                        />\n                        <button\n                            type=\"submit\"\n                            className=\"ui button teal\"\n                            disabled={comment.trim() === ''}\n                            onClick={submitComment}\n                        >\n                            Submit\n                        </button>\n                        </div>\n                    </Form>\n                    </Card.Content>\n                </Card>\n                )}\n                {comments.map((comment) => (\n                <Card fluid key={comment.id}>\n                    <Card.Content>\n                    {user && user.username === comment.username && (\n                        <DeleteButton postId={id} commentId={comment.id} />\n                    )}\n                    <Card.Header>{comment.username}</Card.Header>\n                    <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                    <Card.Description>{comment.body}</Card.Description>\n                    </Card.Content>\n                </Card>\n                ))}\n            </Grid.Column>\n            </Grid.Row>\n        </Grid>\n        );\n    }\n    return postMarkup;\n    }\n\n    const SUBMIT_COMMENT_MUTATION = gql`\n    mutation($postId: String!, $body: String!) {\n        createComment(postId: $postId, body: $body) {\n        id\n        comments {\n            id\n            body\n            createdAt\n            username\n        }\n        commentCount\n        }\n    }\n    `;\n\n    const FETCH_POST_QUERY = gql`\n    query($postId: ID!) {\n        getPost(postId: $postId) {\n        id\n        body\n        createdAt\n        username\n        likeCount\n        likes {\n            username\n        }\n        commentCount\n        comments {\n            id\n            username\n            createdAt\n            body\n        }\n        }\n    }\n    `;\n\n    export default SinglePost;","import React from 'react';\nimport { BrowserRouter as Router,Route } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react'\n\nimport 'semantic-ui-css/semantic.min.css';\nimport '/Users/sunillama/Assembly25/unit-4/P4/P4/client/src/App.js';\n\nimport { AuthProvider } from './context/auth';\nimport AuthRoute from './util/AuthRoute';\n\n\nimport chat from './pages/Chat'\nimport Home from './pages/Home'\nimport Login from './pages/Login'\nimport Register from './pages/Register'\nimport MenuBar from './components/MenuBar'\n\nimport SinglePost from './pages/SinglePost';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path=\"/\" component={Home} />\n          <AuthRoute exact path=\"/login\" component={Login} />\n          <AuthRoute exact path=\"/register\" component={Register} />\n          <AuthRoute exact path=\"/chat\" component={chat} />\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport App from './App';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { setContext } from 'apollo-link-context';\n\nconst httpLink = createHttpLink({\nuri: 'http://localhost:4000'\n});\n\nconst authLink = setContext(() => {\nconst token = localStorage.getItem('jwtToken');\nreturn {\n    headers: {\n    Authorization: token ? `Bearer ${token}` : ''\n    }\n};\n});\n\nconst client = new ApolloClient({\nlink: authLink.concat(httpLink),\ncache: new InMemoryCache()\n});\n\nexport default (\n<ApolloProvider client={client}>\n    <App />\n</ApolloProvider>\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import { render } from 'react-dom';\n// import ApolloClient from 'apollo-boost';\n// import { ApolloProvider } from 'react-apollo';\n// import App from './App';\n\n// // Pass your GraphQL endpoint to uri\n// const client = new ApolloClient({\n//     uri: 'http://localhost:4000/graphql' // no error\n// });\n\n// // const client = new ApolloClient({\n// //     link:httpLink,\n// //     Cache:new InMemoryCache()\n\n// // })\n\n// export default (\n//     <ApolloProvider client={client}>\n//     <App />\n//     </ApolloProvider>\n// );\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker.js';\nimport ApolloProvider from './ApolloProvider';\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}